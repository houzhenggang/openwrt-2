--- a/drivers/spi/spi-mt7621.c
+++ b/drivers/spi/spi-mt7621.c
@@ -105,7 +105,7 @@
 	int cs = spi->chip_select;
 	u32 polar = 0;
 
-        mt7621_spi_reset(rs, cs);
+	mt7621_spi_reset(rs, cs);
 	if (enable)
 		polar = BIT(cs);
 	mt7621_spi_write(rs, MT7621_SPI_POLAR, polar);
@@ -138,18 +138,18 @@
 		reg |= MT7621_LSB_FIRST;
 
 	reg &= ~(MT7621_CPHA | MT7621_CPOL);
-	switch(spi->mode & (SPI_CPOL | SPI_CPHA)) {
-		case SPI_MODE_0:
-			break;
-		case SPI_MODE_1:
-			reg |= MT7621_CPHA;
-			break;
-		case SPI_MODE_2:
-			reg |= MT7621_CPOL;
-			break;
-		case SPI_MODE_3:
-			reg |= MT7621_CPOL | MT7621_CPHA;
-			break;
+	switch (spi->mode & (SPI_CPOL | SPI_CPHA)) {
+	case SPI_MODE_0:
+		break;
+	case SPI_MODE_1:
+		reg |= MT7621_CPHA;
+		break;
+	case SPI_MODE_2:
+		reg |= MT7621_CPOL;
+		break;
+	case SPI_MODE_3:
+		reg |= MT7621_CPOL | MT7621_CPHA;
+		break;
 	}
 	mt7621_spi_write(rs, MT7621_SPI_MASTER, reg);
 
@@ -165,9 +165,8 @@
 		u32 status;
 
 		status = mt7621_spi_read(rs, MT7621_SPI_TRANS);
-		if ((status & SPITRANS_BUSY) == 0) {
+		if ((status & SPITRANS_BUSY) == 0)
 			return 0;
-		}
 		cpu_relax();
 		udelay(1);
 	}
@@ -263,85 +262,99 @@
 	return 0;
 }
 
-static int mt7621_spi_transfer_full_duplex(struct spi_master *master,
-					   struct spi_message *m)
+static int mt7621_spi_set_tx_data_full_duplex(u32 *data, const u8 *buf, int len)
 {
-	struct mt7621_spi *rs = spi_master_get_devdata(master);
-	struct spi_device *spi = m->spi;
-	unsigned int speed = spi->max_speed_hz;
-	struct spi_transfer *t = NULL;
-	int status = 0;
-	int i, len = 0;
-	int rx_len = 0;
-	u32 data[9] = { 0 };
-	u32 val = 0;
-
-	mt7621_spi_wait_till_ready(spi);
+	int i = 0;
 
-	list_for_each_entry(t, &m->transfers, transfer_list) {
-		const u8 *buf = t->tx_buf;
+	if (NULL == buf)
+		return len;
 
-		if (t->rx_buf)
-			rx_len += t->len;
+	for (; i < len; i++)
+		data[i / 4] |= buf[i] << (8 * (i & 3));
 
-		if (!buf)
-			continue;
+	return i;
+}
 
-		if (WARN_ON(len + t->len > 16)) {
-			status = -EIO;
-			goto msg_done;
-		}
+static void mt7621_spi_get_rx_data_full_duplex(const u32 *data, u8 *buf, int len)
+{
+	int i = 0;
 
-		for (i = 0; i < t->len; i++, len++)
-			data[len / 4] |= buf[i] << (8 * (len & 3));
-		if (speed > t->speed_hz)
-			speed = t->speed_hz;
+	if (NULL != buf) {
+		for (; i < len; i++)
+			buf[i] = data[i / 4] >> (8 * (i & 3));
 	}
+}
 
-	if (WARN_ON(rx_len > 16)) {
-		status = -EIO;
-		goto msg_done;
-	}
+static int mt7621_spi_handle_one_transfer_full_duplex(struct spi_transfer *t,
+					struct mt7621_spi *rs,
+					struct spi_device *spi)
+{
+	int nbyte = t->len;
+	u32 val = 0;
+	u32 data[4] = { 0 };
+	const u8 *txbuf = t->tx_buf;
+	u8 *rxbuf = t->rx_buf;
 
-	if (mt7621_spi_prepare(spi, speed)) {
-		status = -EIO;
-		goto msg_done;
-	}
+	while (nbyte) {
+		int i, len = 0;
+		u32 speed;
 
-	for (i = 0; i < len; i += 4)
-		mt7621_spi_write(rs, MT7621_SPI_DATA0 + i, data[i / 4]);
+#define FULL_DUPLEX_MAX_DATA_LEN_BYTE    (16)
+		len = min_t(int, FULL_DUPLEX_MAX_DATA_LEN_BYTE, nbyte);
+		len = mt7621_spi_set_tx_data_full_duplex(data, txbuf, len);
+		if (NULL != txbuf)
+			txbuf += len;
 
-	val |= len * 8;
-	val |= (rx_len * 8) << 12;
-	mt7621_spi_write(rs, MT7621_SPI_MOREBUF, val);
+		speed = min_t(int, spi->max_speed_hz, t->speed_hz);
+		if (mt7621_spi_prepare(spi, speed))
+			return -EIO;
 
-	mt7621_spi_set_cs(spi, 1);
+		for (i = 0; i < len; i += 4)
+			mt7621_spi_write(rs, MT7621_SPI_DATA0 + i, data[i / 4]);
 
-	val = mt7621_spi_read(rs, MT7621_SPI_TRANS);
-	val |= SPI_CTL_START;
-	mt7621_spi_write(rs, MT7621_SPI_TRANS, val);
+		val |= len * 8;
+		val |= (len * 8) << 12;
+		mt7621_spi_write(rs, MT7621_SPI_MOREBUF, val);
 
-	mt7621_spi_wait_till_ready(spi);
+		mt7621_spi_set_cs(spi, 1);
 
-	mt7621_spi_set_cs(spi, 0);
+		val = mt7621_spi_read(rs, MT7621_SPI_TRANS);
+		val |= SPI_CTL_START;
+		mt7621_spi_write(rs, MT7621_SPI_TRANS, val);
 
-	for (i = 0; i < rx_len; i += 4)
-		data[i / 4] = mt7621_spi_read(rs, MT7621_SPI_DATA4 + i);
+		mt7621_spi_wait_till_ready(spi);
 
-	m->actual_length = rx_len;
+		mt7621_spi_set_cs(spi, 0);
 
-	len = 0;
-	list_for_each_entry(t, &m->transfers, transfer_list) {
-		u8 *buf = t->rx_buf;
+		for (i = 0; i < len; i += 4)
+			data[i / 4] = mt7621_spi_read(rs, MT7621_SPI_DATA4 + i);
 
-		if (!buf)
-			continue;
+		mt7621_spi_get_rx_data_full_duplex(data, rxbuf, len);
+		if (NULL != rxbuf)
+			rxbuf += len;
+		nbyte -= len;
+	}
 
-		for (i = 0; i < t->len; i++, len++)
-			buf[i] = data[len / 4] >> (8 * (len & 3));
+	return 0;
+}
+
+static int mt7621_spi_transfer_full_duplex(struct spi_master *master,
+					   struct spi_message *m)
+{
+	struct mt7621_spi *rs = spi_master_get_devdata(master);
+	struct spi_device *spi = m->spi;
+	struct spi_transfer *t = NULL;
+	int status = 0;
+
+	mt7621_spi_wait_till_ready(spi);
+
+	list_for_each_entry(t, &m->transfers, transfer_list) {
+		status = mt7621_spi_handle_one_transfer_full_duplex(t, rs, spi);
+		if (status < 0)
+			break;
+		m->actual_length += t->len;
 	}
 
-msg_done:
 	m->status = status;
 	spi_finalize_current_message(master);
 
